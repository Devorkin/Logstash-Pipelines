filter {
  if "MikroTik" in [type] {
    if "Detected" in [message] {
      grok {
        match   =>    {   "message"   =>    "%{SYSLOGTIMESTAMP} %{WORD:Device} Detected %{WORD:Action} by ARP response for %{IPV4:IPAddress} from %{COMMONMAC:MACAddress}" }
      }
      mutate  {
        add_field => { "tags" => "Detection" }
        remove_field    =>  ["message"]
        uppercase => [ "Action" ]
      }
    }
    else if "dhcp" in [message] {
      if "assigned" in [mesage] {
        grok {
          match   =>    {   "message"   =>  "%{SYSLOGTIMESTAMP} %{WORD:Device} dhcp %{WORD:DHCPServerName} assigned %{IPV4:IPAddress} to %{COMMONMAC:MACAddress}" }
        }
        mutate {
          add_field   =>  { "tags"  =>  "IP Assignment" }
          remove_field    =>  ["message"]
        }
      }
      else if "deassigned" in [mesage] {
        grok {
          match   =>    {   "message"   =>  "%{SYSLOGTIMESTAMP} MikroTik dhcp %{WORD:DHCPServerName} deassigned %{IPV4:IPAddress} from %{COMMONMAC:MACAddress}" }
        }
        mutate {
          add_field   =>  { "tags"  =>  "IP  Deassignment" }
          remove_field    =>  ["message"]
        }
      }
      mutate {
        add_field   =>    { "tags"  =>  "DHCP"}
      }
    }
    else if "filter rule" in [message] {
      grok {
        match   =>  {   "message"   =>  "%{SYSLOGTIMESTAMP} %{WORD:Device} filter rule %{WORD:RuleAction} by %{USERNAME:Username}" }
      }
      mutate  {
        add_field => { "tags" => "Rule" }
        remove_field    =>  ["message"]
      }
    }
    else if "forward" in [message] {
      if "NAT" in [message] {
        grok {
          match   =>    [
            "message", "%{SYSLOGTIMESTAMP} %{WORD:Device} %{WORD:Chain}: in:%{WORD:Src_Int} out:%{WORD:Dst_Int}, src-mac %{COMMONMAC:Src_MAC}, proto %{WORD:Protocol}(?:[\,\ ]+)?(?:\((?<Protocol_Flag>[a-zA-Z,]+)\))?(?:\,)? %{IPV4:SRC_IP}:%{INT:SRC_Port}->%{IPV4:DST_IP}:%{INT:DST_Port}, NAT (?:\(%{IPV4}:%{INT}->%{IPV4:NAT_SRC_IP}:%{INT:NAT_SRC_Port}\)->%{IPV4}:%{INT})?(?:%{IPV4}:%{INT}->\(%{IPV4:NAT_DST_IP}:%{INT:NAT_DST_Port}->%{IPV4}:%{INT}\))?(?:\,)? len %{INT}",
            "message", "%{SYSLOGTIMESTAMP} %{WORD:Device} %{WORD:Chain}: in:%{WORD:Src_Int} out:%{WORD:Dst_Int}, src-mac %{COMMONMAC:Src_MAC}, proto %{WORD:Protocol}(?:[\,\ ]+)?(?:\((?<Protocol_Flag>[a-zA-Z,]+)\))?(?:\(type %{INT:Type}, code %{INT:Code}\))?(?:[\,\ ]+)? %{IPV4:SRC_IP}->%{IPV4:DST_IP}, NAT %{IPV4}->(?:\(%{IPV4:NAT_SRC_IP}->%{IPV4:NAT_DST_IP}\))?, len %{INT}"
          ]
        }
        mutate {
          add_field       =>    { "tags"  =>  "NAT" }
          emove_field    =>    ["message"]
          uppercase       =>    [ "Chain" ]
        }
      }
      else {
        grok {
          match =>  [
            "message", "%{SYSLOGTIMESTAMP} %{WORD:Device} %{WORD:Chain}: in:%{WORD:Src_Int} out:%{WORD:Dst_Int}, src-mac %{COMMONMAC:Src_MAC}, proto %{WORD:Protocol}(?:[\,\ ]+)?(?:\((?<Protocol_Flag>[a-zA-Z,]+)\))?(?:[\,\ ]+)?%{IPV4:SRC_IP}:%{INT:SRC_Port}->%{IPV4:DST_IP}:%{INT:DST_Port}",
            "message", "%{SYSLOGTIMESTAMP} %{WORD:Device} %{WORD:Chain}: in:%{WORD:Src_Int} out:%{WORD:Dst_Int}, src-mac %{COMMONMAC:Src_MAC}, proto %{WORD:Protocol}(?:[\,\ ]+)?(?:\((?<Protocol_Flag>[a-zA-Z,]+)\))?(?:\(type %{INT:Type}, code %{INT:Code}\))?(?:[\,\ ]+)?%{IPV4:SRC_IP}->%{IPV4:DST_IP}, len %{INT}"
          ]
        }
        mutate {
          add_field   =>  { "tags"  =>  "Forward" }
          remove_field    =>  ["message"]
          uppercase   =>    [ "Chain" ]
        }
      }
      mutate {
        add_field   =>    { "tags"  =>  "Firewall" }
      }
    }
    else if "input" in [message] {
      grok {
        match =>  [
          "message", "%{SYSLOGTIMESTAMP} %{WORD:Device} %{WORD:Chain}: in:%{WORD:Src_Int} (?:out:\(unknown 0\))?(?:out:%{WORD:Dst_Int})?, src-mac %{COMMONMAC:Src_MAC}, proto %{WORD:Protocol}(?:\ \((?<Protocol_Flag>[a-zA-Z,]+)\))?(?:\,)? %{IPV4:SRC_IP}:%{INT:SRC_Port}->%{IPV4:DST_IP}:%{INT:DST_Port}(?:\,)? len %{INT}",
          "message", "%{SYSLOGTIMESTAMP} %{WORD:Device} %{WORD:Chain}: in:%{WORD:Src_Int} (?:out:\(unknown 0\))?(?:out:%{WORD:Dst_Int})?, src-mac %{COMMONMAC:Src_MAC}, proto %{WORD:Protocol}(?:[\,\ ]+)?(?:\((?<Protocol_Flag>[a-zA-Z,]+)\))?(?:\(type %{INT:Type}, code %{INT:Code}\))?(?:[\,\ ]+)?%{IPV4:SRC_IP}->%{IPV4:DST_IP}, len %{INT}"
        ]
      }
      mutate {
        add_field   =>    { "tags"  =>  "Firewall" }
        add_field   =>    { "tags"  =>  "Input" }
        remove_field    =>  ["message"]
        uppercase   =>    [ "Chain" ]
      }
    }
    else if "MikroTik user" in [message] {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP} %{WORD:Device} user %{WORD:UserName} logged %{WORD:Action} from %{IPV4:SRC_IP} via %{WORD:Application}" }
      }
      mutate {
        add_field   =>    { "tags"  =>  "Authentication" }
        add_field   =>    { "tags"  =>  "Login-Logout" }
        remove_field    =>  ["message"]
        uppercase   =>    [ "Action" ]
      }
    }
    # Still need to be developed
    else if "output" in [message] {
      grok {
        match => { "message" => "%{GREEDYDATA:Other}" }
      }
      mutate {
        add_field   =>    { "tags"  =>  "Firewall" }
        add_field   =>    { "tags"  =>  "Output" }
        # remove_field    =>  ["message"]
      }
    }
    else if "login failure" in [message] {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP} %{WORD:Device} login failure for user %{WORD:UserName} from %{IPV4:SRC_IP} via %{WORD:Application}" }
      }
      mutate {
        add_field   =>    { "tags"  =>  "Authentication" }
        add_field   =>    { "tags"  =>  "Failure" }
        remove_field    =>  ["message"]
      }      
    }
  }
}